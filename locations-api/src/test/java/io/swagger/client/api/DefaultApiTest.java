/*
 * Locations API
 * This document describes the Kiwi.com locations search API.  **Locations** is a simple API used to search, suggest and resolve locations in various situations.  ## Contact us In case you cannot find what you are looking for in this document please contact us directly at **[tequila-support@kiwi.com](mailto:tequila-support@kiwi.com)**.  **The responses are G-zipped and need to be unpacked (response header Content-Encoding: gzip).**
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get by anything
     *
     * Get locations specified by any of the following fields for example - id, int_id, code, icao, name, slug, etc.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsAnythingGetTest() throws ApiException {
        String apikey = null;
        String key = null;
        String value = null;
        Boolean activeOnly = null;
        InlineResponse200 response = api.locationsAnythingGet(apikey, key, value, activeOnly);

        // TODO: test validations
    }
    /**
     * Search by box
     *
     * Get all locations within the specified box.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsBoxGetTest() throws ApiException {
        String apikey = null;
        String lowLat = null;
        String lowLon = null;
        String highLat = null;
        String highLon = null;
        String locale = null;
        String locationTypes = null;
        Integer limit = null;
        String sort = null;
        Boolean activeOnly = null;
        InlineResponse200 response = api.locationsBoxGet(apikey, lowLat, lowLon, highLat, highLon, locale, locationTypes, limit, sort, activeOnly);

        // TODO: test validations
    }
    /**
     * Get dump
     *
     * Get dump of locations data in specified language.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsDumpGetTest() throws ApiException {
        String apikey = null;
        String locale = null;
        String locationTypes = null;
        Integer limit = null;
        String sort = null;
        Boolean activeOnly = null;
        InlineResponse200 response = api.locationsDumpGet(apikey, locale, locationTypes, limit, sort, activeOnly);

        // TODO: test validations
    }
    /**
     * Search by hashtags
     *
     * This type of request returns a list of destinations most searched / clicked on / booked from the starting point &#x60;term&#x60;.  The &#x60;limit&#x60; is used to limit the range of results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsHashtagGetTest() throws ApiException {
        String apikey = null;
        String hashtag = null;
        String term = null;
        Integer month = null;
        String locale = null;
        Integer limit = null;
        String sort = null;
        Boolean activeOnly = null;
        InlineResponse200 response = api.locationsHashtagGet(apikey, hashtag, term, month, locale, limit, sort, activeOnly);

        // TODO: test validations
    }
    /**
     * Get by id
     *
     * Get location specified by its id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsIdGetTest() throws ApiException {
        String apikey = null;
        String id = null;
        Integer limit = null;
        String locale = null;
        Boolean activeOnly = null;
        InlineResponse200 response = api.locationsIdGet(apikey, id, limit, locale, activeOnly);

        // TODO: test validations
    }
    /**
     * Search by query
     *
     * Type of request used mainly for suggestions (based on incomplete names)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsQueryGetTest() throws ApiException {
        String apikey = null;
        String term = null;
        String locale = null;
        String locationTypes = null;
        Integer limit = null;
        Boolean activeOnly = null;
        String sort = null;
        InlineResponse200 response = api.locationsQueryGet(apikey, term, locale, locationTypes, limit, activeOnly, sort);

        // TODO: test validations
    }
    /**
     * Search by radius
     *
     * This type of request supports either specification of location by coordinates (&#x60;lat&#x60;, &#x60;lon&#x60;) or by identifier (slug or id of location - &#x60;term&#x60;)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsRadiusGetTest() throws ApiException {
        String apikey = null;
        String lat = null;
        String lon = null;
        String term = null;
        String radius = null;
        String locale = null;
        String locationTypes = null;
        Integer limit = null;
        String sort = null;
        Boolean activeOnly = null;
        InlineResponse200 response = api.locationsRadiusGet(apikey, lat, lon, term, radius, locale, locationTypes, limit, sort, activeOnly);

        // TODO: test validations
    }
    /**
     * Search by seo url
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsSlugGetTest() throws ApiException {
        String apikey = null;
        String term = null;
        String locale = null;
        Boolean activeOnly = null;
        InlineResponse200 response = api.locationsSlugGet(apikey, term, locale, activeOnly);

        // TODO: test validations
    }
    /**
     * Get by subentity
     *
     * Get all locations that are below (in hierarchy) the one specified by id - e.g. for &#x60;?type&#x3D;subentity&amp;term&#x3D;london_gb&#x60; all locations in London are returned (as London is &#x60;city&#x60;, &#x60;airports&#x60;, &#x60;stations&#x60; and &#x60;bus_stations&#x60; are returned).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsSubentityGetTest() throws ApiException {
        String apikey = null;
        String term = null;
        String locale = null;
        String locationTypes = null;
        Integer limit = null;
        String sort = null;
        Boolean activeOnly = null;
        InlineResponse200 response = api.locationsSubentityGet(apikey, term, locale, locationTypes, limit, sort, activeOnly);

        // TODO: test validations
    }
    /**
     * Search top destinations
     *
     * This type of request returns a list of destinations most searched / clicked on / booked from the starting point &#x60;term&#x60;.  The &#x60;limit&#x60; is used to limit the range of results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsTopdestinationsGetTest() throws ApiException {
        String apikey = null;
        String term = null;
        String locale = null;
        Integer limit = null;
        String sort = null;
        Boolean activeOnly = null;
        String sourcePopularity = null;
        InlineResponse200 response = api.locationsTopdestinationsGet(apikey, term, locale, limit, sort, activeOnly, sourcePopularity);

        // TODO: test validations
    }
    /**
     * Top destinations&#x60; hashtags lookup
     *
     * This type of request returns a list of destinations&#x27; hashtags most searched / clicked on / booked from the starting point &#x60;term&#x60;. In other words it can be understood as following: What are the most popular activies at the places that customers tend to search for / click / book when flying from &#x60;term&#x60; ? The &#x60;limit&#x60; is used to limit the range of results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void locationsTophashtagsGetTest() throws ApiException {
        String apikey = null;
        String term = null;
        Integer limit = null;
        String sourcePopularity = null;
        String fallbackPopularity = null;
        InlineResponse2001 response = api.locationsTophashtagsGet(apikey, term, limit, sourcePopularity, fallbackPopularity);

        // TODO: test validations
    }
}
