/*
 * Locations API
 * This document describes the Kiwi.com locations search API.  **Locations** is a simple API used to search, suggest and resolve locations in various situations.  ## Contact us In case you cannot find what you are looking for in this document please contact us directly at **[tequila-support@kiwi.com](mailto:tequila-support@kiwi.com)**.  **The responses are G-zipped and need to be unpacked (response header Content-Encoding: gzip).**
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for locationsAnythingGet
     * @param apikey  (required)
     * @param key key is the field in response.  To be used in conjunction with the &#x27;value&#x27; field. (required)
     * @param value value of the field selected in key.  To be used in conjunctions with the &#x27;key&#x27; field.  It returns locations that match the specified conditions. (required)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locationsAnythingGetCall(String apikey, String key, String value, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/locations/anything";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (key != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("key", key));
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_only", activeOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null)
        localVarHeaderParams.put("apikey", apiClient.parameterToString(apikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locationsAnythingGetValidateBeforeCall(String apikey, String key, String value, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling locationsAnythingGet(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling locationsAnythingGet(Async)");
        }
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling locationsAnythingGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locationsAnythingGetCall(apikey, key, value, activeOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get by anything
     * Get locations specified by any of the following fields for example - id, int_id, code, icao, name, slug, etc.
     * @param apikey  (required)
     * @param key key is the field in response.  To be used in conjunction with the &#x27;value&#x27; field. (required)
     * @param value value of the field selected in key.  To be used in conjunctions with the &#x27;key&#x27; field.  It returns locations that match the specified conditions. (required)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 locationsAnythingGet(String apikey, String key, String value, Boolean activeOnly) throws ApiException {
        ApiResponse<InlineResponse200> resp = locationsAnythingGetWithHttpInfo(apikey, key, value, activeOnly);
        return resp.getData();
    }

    /**
     * Get by anything
     * Get locations specified by any of the following fields for example - id, int_id, code, icao, name, slug, etc.
     * @param apikey  (required)
     * @param key key is the field in response.  To be used in conjunction with the &#x27;value&#x27; field. (required)
     * @param value value of the field selected in key.  To be used in conjunctions with the &#x27;key&#x27; field.  It returns locations that match the specified conditions. (required)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> locationsAnythingGetWithHttpInfo(String apikey, String key, String value, Boolean activeOnly) throws ApiException {
        com.squareup.okhttp.Call call = locationsAnythingGetValidateBeforeCall(apikey, key, value, activeOnly, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get by anything (asynchronously)
     * Get locations specified by any of the following fields for example - id, int_id, code, icao, name, slug, etc.
     * @param apikey  (required)
     * @param key key is the field in response.  To be used in conjunction with the &#x27;value&#x27; field. (required)
     * @param value value of the field selected in key.  To be used in conjunctions with the &#x27;key&#x27; field.  It returns locations that match the specified conditions. (required)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locationsAnythingGetAsync(String apikey, String key, String value, Boolean activeOnly, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locationsAnythingGetValidateBeforeCall(apikey, key, value, activeOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locationsBoxGet
     * @param apikey  (required)
     * @param lowLat latitude of southwest corner of geo box search; &#x60;40.2&#x60; is also acceptable. (required)
     * @param lowLon longitude of southwest corner of geo box search; &#x60;-74.6&#x60; is also acceptable. (required)
     * @param highLat latitude of northeast corner of geo box search; &#x60;44.7&#x60; is also acceptable. (required)
     * @param highLon longitude of northeast corner of geo box search; &#x60;-73.3&#x60; is also acceptable. (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locationsBoxGetCall(String apikey, String lowLat, String lowLon, String highLat, String highLon, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/locations/box";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lowLat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("low_lat", lowLat));
        if (lowLon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("low_lon", lowLon));
        if (highLat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("high_lat", highLat));
        if (highLon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("high_lon", highLon));
        if (locale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locale", locale));
        if (locationTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location_types", locationTypes));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_only", activeOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null)
        localVarHeaderParams.put("apikey", apiClient.parameterToString(apikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locationsBoxGetValidateBeforeCall(String apikey, String lowLat, String lowLon, String highLat, String highLon, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling locationsBoxGet(Async)");
        }
        // verify the required parameter 'lowLat' is set
        if (lowLat == null) {
            throw new ApiException("Missing the required parameter 'lowLat' when calling locationsBoxGet(Async)");
        }
        // verify the required parameter 'lowLon' is set
        if (lowLon == null) {
            throw new ApiException("Missing the required parameter 'lowLon' when calling locationsBoxGet(Async)");
        }
        // verify the required parameter 'highLat' is set
        if (highLat == null) {
            throw new ApiException("Missing the required parameter 'highLat' when calling locationsBoxGet(Async)");
        }
        // verify the required parameter 'highLon' is set
        if (highLon == null) {
            throw new ApiException("Missing the required parameter 'highLon' when calling locationsBoxGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locationsBoxGetCall(apikey, lowLat, lowLon, highLat, highLon, locale, locationTypes, limit, sort, activeOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search by box
     * Get all locations within the specified box.
     * @param apikey  (required)
     * @param lowLat latitude of southwest corner of geo box search; &#x60;40.2&#x60; is also acceptable. (required)
     * @param lowLon longitude of southwest corner of geo box search; &#x60;-74.6&#x60; is also acceptable. (required)
     * @param highLat latitude of northeast corner of geo box search; &#x60;44.7&#x60; is also acceptable. (required)
     * @param highLon longitude of northeast corner of geo box search; &#x60;-73.3&#x60; is also acceptable. (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 locationsBoxGet(String apikey, String lowLat, String lowLon, String highLat, String highLon, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly) throws ApiException {
        ApiResponse<InlineResponse200> resp = locationsBoxGetWithHttpInfo(apikey, lowLat, lowLon, highLat, highLon, locale, locationTypes, limit, sort, activeOnly);
        return resp.getData();
    }

    /**
     * Search by box
     * Get all locations within the specified box.
     * @param apikey  (required)
     * @param lowLat latitude of southwest corner of geo box search; &#x60;40.2&#x60; is also acceptable. (required)
     * @param lowLon longitude of southwest corner of geo box search; &#x60;-74.6&#x60; is also acceptable. (required)
     * @param highLat latitude of northeast corner of geo box search; &#x60;44.7&#x60; is also acceptable. (required)
     * @param highLon longitude of northeast corner of geo box search; &#x60;-73.3&#x60; is also acceptable. (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> locationsBoxGetWithHttpInfo(String apikey, String lowLat, String lowLon, String highLat, String highLon, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly) throws ApiException {
        com.squareup.okhttp.Call call = locationsBoxGetValidateBeforeCall(apikey, lowLat, lowLon, highLat, highLon, locale, locationTypes, limit, sort, activeOnly, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search by box (asynchronously)
     * Get all locations within the specified box.
     * @param apikey  (required)
     * @param lowLat latitude of southwest corner of geo box search; &#x60;40.2&#x60; is also acceptable. (required)
     * @param lowLon longitude of southwest corner of geo box search; &#x60;-74.6&#x60; is also acceptable. (required)
     * @param highLat latitude of northeast corner of geo box search; &#x60;44.7&#x60; is also acceptable. (required)
     * @param highLon longitude of northeast corner of geo box search; &#x60;-73.3&#x60; is also acceptable. (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locationsBoxGetAsync(String apikey, String lowLat, String lowLon, String highLat, String highLon, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locationsBoxGetValidateBeforeCall(apikey, lowLat, lowLon, highLat, highLon, locale, locationTypes, limit, sort, activeOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locationsDumpGet
     * @param apikey  (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locationsDumpGetCall(String apikey, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/locations/dump";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locale", locale));
        if (locationTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location_types", locationTypes));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_only", activeOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null)
        localVarHeaderParams.put("apikey", apiClient.parameterToString(apikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locationsDumpGetValidateBeforeCall(String apikey, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling locationsDumpGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locationsDumpGetCall(apikey, locale, locationTypes, limit, sort, activeOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get dump
     * Get dump of locations data in specified language.
     * @param apikey  (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 locationsDumpGet(String apikey, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly) throws ApiException {
        ApiResponse<InlineResponse200> resp = locationsDumpGetWithHttpInfo(apikey, locale, locationTypes, limit, sort, activeOnly);
        return resp.getData();
    }

    /**
     * Get dump
     * Get dump of locations data in specified language.
     * @param apikey  (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> locationsDumpGetWithHttpInfo(String apikey, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly) throws ApiException {
        com.squareup.okhttp.Call call = locationsDumpGetValidateBeforeCall(apikey, locale, locationTypes, limit, sort, activeOnly, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get dump (asynchronously)
     * Get dump of locations data in specified language.
     * @param apikey  (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locationsDumpGetAsync(String apikey, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locationsDumpGetValidateBeforeCall(apikey, locale, locationTypes, limit, sort, activeOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locationsHashtagGet
     * @param apikey  (required)
     * @param hashtag hashtag that the returned location have to be tagged with. (required)
     * @param term identifier of the location the returned locations should be part of - id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;). (optional)
     * @param month the month in which the hashtag should be valid. Multiple values are allowed. (optional)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sort  (optional)
     * @param activeOnly default value &#x3D; true.  It displays all active locations. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locationsHashtagGetCall(String apikey, String hashtag, String term, Integer month, String locale, Integer limit, String sort, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/locations/hashtag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hashtag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hashtag", hashtag));
        if (term != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("term", term));
        if (month != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("month", month));
        if (locale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locale", locale));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_only", activeOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null)
        localVarHeaderParams.put("apikey", apiClient.parameterToString(apikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locationsHashtagGetValidateBeforeCall(String apikey, String hashtag, String term, Integer month, String locale, Integer limit, String sort, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling locationsHashtagGet(Async)");
        }
        // verify the required parameter 'hashtag' is set
        if (hashtag == null) {
            throw new ApiException("Missing the required parameter 'hashtag' when calling locationsHashtagGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locationsHashtagGetCall(apikey, hashtag, term, month, locale, limit, sort, activeOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search by hashtags
     * This type of request returns a list of destinations most searched / clicked on / booked from the starting point &#x60;term&#x60;.  The &#x60;limit&#x60; is used to limit the range of results.
     * @param apikey  (required)
     * @param hashtag hashtag that the returned location have to be tagged with. (required)
     * @param term identifier of the location the returned locations should be part of - id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;). (optional)
     * @param month the month in which the hashtag should be valid. Multiple values are allowed. (optional)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sort  (optional)
     * @param activeOnly default value &#x3D; true.  It displays all active locations. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 locationsHashtagGet(String apikey, String hashtag, String term, Integer month, String locale, Integer limit, String sort, Boolean activeOnly) throws ApiException {
        ApiResponse<InlineResponse200> resp = locationsHashtagGetWithHttpInfo(apikey, hashtag, term, month, locale, limit, sort, activeOnly);
        return resp.getData();
    }

    /**
     * Search by hashtags
     * This type of request returns a list of destinations most searched / clicked on / booked from the starting point &#x60;term&#x60;.  The &#x60;limit&#x60; is used to limit the range of results.
     * @param apikey  (required)
     * @param hashtag hashtag that the returned location have to be tagged with. (required)
     * @param term identifier of the location the returned locations should be part of - id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;). (optional)
     * @param month the month in which the hashtag should be valid. Multiple values are allowed. (optional)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sort  (optional)
     * @param activeOnly default value &#x3D; true.  It displays all active locations. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> locationsHashtagGetWithHttpInfo(String apikey, String hashtag, String term, Integer month, String locale, Integer limit, String sort, Boolean activeOnly) throws ApiException {
        com.squareup.okhttp.Call call = locationsHashtagGetValidateBeforeCall(apikey, hashtag, term, month, locale, limit, sort, activeOnly, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search by hashtags (asynchronously)
     * This type of request returns a list of destinations most searched / clicked on / booked from the starting point &#x60;term&#x60;.  The &#x60;limit&#x60; is used to limit the range of results.
     * @param apikey  (required)
     * @param hashtag hashtag that the returned location have to be tagged with. (required)
     * @param term identifier of the location the returned locations should be part of - id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;). (optional)
     * @param month the month in which the hashtag should be valid. Multiple values are allowed. (optional)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sort  (optional)
     * @param activeOnly default value &#x3D; true.  It displays all active locations. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locationsHashtagGetAsync(String apikey, String hashtag, String term, Integer month, String locale, Integer limit, String sort, Boolean activeOnly, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locationsHashtagGetValidateBeforeCall(apikey, hashtag, term, month, locale, limit, sort, activeOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locationsIdGet
     * @param apikey  (required)
     * @param id this is the exact IATA airport or ISO3166 location code - &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. Multiple ids can be specified by appending &#x60;&amp;id&#x3D;{id}&#x60;. (required)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locationsIdGetCall(String apikey, String id, Integer limit, String locale, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/locations/id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (locale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locale", locale));
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_only", activeOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null)
        localVarHeaderParams.put("apikey", apiClient.parameterToString(apikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locationsIdGetValidateBeforeCall(String apikey, String id, Integer limit, String locale, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling locationsIdGet(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling locationsIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locationsIdGetCall(apikey, id, limit, locale, activeOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get by id
     * Get location specified by its id.
     * @param apikey  (required)
     * @param id this is the exact IATA airport or ISO3166 location code - &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. Multiple ids can be specified by appending &#x60;&amp;id&#x3D;{id}&#x60;. (required)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 locationsIdGet(String apikey, String id, Integer limit, String locale, Boolean activeOnly) throws ApiException {
        ApiResponse<InlineResponse200> resp = locationsIdGetWithHttpInfo(apikey, id, limit, locale, activeOnly);
        return resp.getData();
    }

    /**
     * Get by id
     * Get location specified by its id.
     * @param apikey  (required)
     * @param id this is the exact IATA airport or ISO3166 location code - &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. Multiple ids can be specified by appending &#x60;&amp;id&#x3D;{id}&#x60;. (required)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> locationsIdGetWithHttpInfo(String apikey, String id, Integer limit, String locale, Boolean activeOnly) throws ApiException {
        com.squareup.okhttp.Call call = locationsIdGetValidateBeforeCall(apikey, id, limit, locale, activeOnly, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get by id (asynchronously)
     * Get location specified by its id.
     * @param apikey  (required)
     * @param id this is the exact IATA airport or ISO3166 location code - &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. Multiple ids can be specified by appending &#x60;&amp;id&#x3D;{id}&#x60;. (required)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locationsIdGetAsync(String apikey, String id, Integer limit, String locale, Boolean activeOnly, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locationsIdGetValidateBeforeCall(apikey, id, limit, locale, activeOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locationsQueryGet
     * @param apikey  (required)
     * @param term searched term (for suggestions).  This parameter expects a full IATA code. If IATA code is not given, the search will go through other available fields: &#x27;id&#x27;, &#x27;name&#x27; or &#x27;code&#x27; of the location. It also depends on the &#x27;location_types&#x27; specified eg. airport, city, country.  The search that is used behind the scenes is elasticsearch.  It returns data based on relevancy and many other factors. (required)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 10. Desired number of results in the output. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locationsQueryGetCall(String apikey, String term, String locale, String locationTypes, Integer limit, Boolean activeOnly, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/locations/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (term != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("term", term));
        if (locale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locale", locale));
        if (locationTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location_types", locationTypes));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_only", activeOnly));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null)
        localVarHeaderParams.put("apikey", apiClient.parameterToString(apikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locationsQueryGetValidateBeforeCall(String apikey, String term, String locale, String locationTypes, Integer limit, Boolean activeOnly, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling locationsQueryGet(Async)");
        }
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling locationsQueryGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locationsQueryGetCall(apikey, term, locale, locationTypes, limit, activeOnly, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search by query
     * Type of request used mainly for suggestions (based on incomplete names)
     * @param apikey  (required)
     * @param term searched term (for suggestions).  This parameter expects a full IATA code. If IATA code is not given, the search will go through other available fields: &#x27;id&#x27;, &#x27;name&#x27; or &#x27;code&#x27; of the location. It also depends on the &#x27;location_types&#x27; specified eg. airport, city, country.  The search that is used behind the scenes is elasticsearch.  It returns data based on relevancy and many other factors. (required)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 10. Desired number of results in the output. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 locationsQueryGet(String apikey, String term, String locale, String locationTypes, Integer limit, Boolean activeOnly, String sort) throws ApiException {
        ApiResponse<InlineResponse200> resp = locationsQueryGetWithHttpInfo(apikey, term, locale, locationTypes, limit, activeOnly, sort);
        return resp.getData();
    }

    /**
     * Search by query
     * Type of request used mainly for suggestions (based on incomplete names)
     * @param apikey  (required)
     * @param term searched term (for suggestions).  This parameter expects a full IATA code. If IATA code is not given, the search will go through other available fields: &#x27;id&#x27;, &#x27;name&#x27; or &#x27;code&#x27; of the location. It also depends on the &#x27;location_types&#x27; specified eg. airport, city, country.  The search that is used behind the scenes is elasticsearch.  It returns data based on relevancy and many other factors. (required)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 10. Desired number of results in the output. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> locationsQueryGetWithHttpInfo(String apikey, String term, String locale, String locationTypes, Integer limit, Boolean activeOnly, String sort) throws ApiException {
        com.squareup.okhttp.Call call = locationsQueryGetValidateBeforeCall(apikey, term, locale, locationTypes, limit, activeOnly, sort, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search by query (asynchronously)
     * Type of request used mainly for suggestions (based on incomplete names)
     * @param apikey  (required)
     * @param term searched term (for suggestions).  This parameter expects a full IATA code. If IATA code is not given, the search will go through other available fields: &#x27;id&#x27;, &#x27;name&#x27; or &#x27;code&#x27; of the location. It also depends on the &#x27;location_types&#x27; specified eg. airport, city, country.  The search that is used behind the scenes is elasticsearch.  It returns data based on relevancy and many other factors. (required)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 10. Desired number of results in the output. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locationsQueryGetAsync(String apikey, String term, String locale, String locationTypes, Integer limit, Boolean activeOnly, String sort, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locationsQueryGetValidateBeforeCall(apikey, term, locale, locationTypes, limit, activeOnly, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locationsRadiusGet
     * @param apikey  (required)
     * @param lat latitude of the centre point of the search.  &#x60;40.7&#x60; is also acceptable. (optional)
     * @param lon longitude of the centre point of the search.  &#x60;-73.9&#x60; is also acceptable. (optional)
     * @param term identifier of the location - slug or id (you cannot specify  coordinates &amp; term in the same request) (optional)
     * @param radius the radious defaults to 250 km but can be changed (optional)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locationsRadiusGetCall(String apikey, String lat, String lon, String term, String radius, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/locations/radius";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lat", lat));
        if (lon != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lon", lon));
        if (term != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("term", term));
        if (radius != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("radius", radius));
        if (locale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locale", locale));
        if (locationTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location_types", locationTypes));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_only", activeOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null)
        localVarHeaderParams.put("apikey", apiClient.parameterToString(apikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locationsRadiusGetValidateBeforeCall(String apikey, String lat, String lon, String term, String radius, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling locationsRadiusGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locationsRadiusGetCall(apikey, lat, lon, term, radius, locale, locationTypes, limit, sort, activeOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search by radius
     * This type of request supports either specification of location by coordinates (&#x60;lat&#x60;, &#x60;lon&#x60;) or by identifier (slug or id of location - &#x60;term&#x60;)
     * @param apikey  (required)
     * @param lat latitude of the centre point of the search.  &#x60;40.7&#x60; is also acceptable. (optional)
     * @param lon longitude of the centre point of the search.  &#x60;-73.9&#x60; is also acceptable. (optional)
     * @param term identifier of the location - slug or id (you cannot specify  coordinates &amp; term in the same request) (optional)
     * @param radius the radious defaults to 250 km but can be changed (optional)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 locationsRadiusGet(String apikey, String lat, String lon, String term, String radius, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly) throws ApiException {
        ApiResponse<InlineResponse200> resp = locationsRadiusGetWithHttpInfo(apikey, lat, lon, term, radius, locale, locationTypes, limit, sort, activeOnly);
        return resp.getData();
    }

    /**
     * Search by radius
     * This type of request supports either specification of location by coordinates (&#x60;lat&#x60;, &#x60;lon&#x60;) or by identifier (slug or id of location - &#x60;term&#x60;)
     * @param apikey  (required)
     * @param lat latitude of the centre point of the search.  &#x60;40.7&#x60; is also acceptable. (optional)
     * @param lon longitude of the centre point of the search.  &#x60;-73.9&#x60; is also acceptable. (optional)
     * @param term identifier of the location - slug or id (you cannot specify  coordinates &amp; term in the same request) (optional)
     * @param radius the radious defaults to 250 km but can be changed (optional)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> locationsRadiusGetWithHttpInfo(String apikey, String lat, String lon, String term, String radius, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly) throws ApiException {
        com.squareup.okhttp.Call call = locationsRadiusGetValidateBeforeCall(apikey, lat, lon, term, radius, locale, locationTypes, limit, sort, activeOnly, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search by radius (asynchronously)
     * This type of request supports either specification of location by coordinates (&#x60;lat&#x60;, &#x60;lon&#x60;) or by identifier (slug or id of location - &#x60;term&#x60;)
     * @param apikey  (required)
     * @param lat latitude of the centre point of the search.  &#x60;40.7&#x60; is also acceptable. (optional)
     * @param lon longitude of the centre point of the search.  &#x60;-73.9&#x60; is also acceptable. (optional)
     * @param term identifier of the location - slug or id (you cannot specify  coordinates &amp; term in the same request) (optional)
     * @param radius the radious defaults to 250 km but can be changed (optional)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locationsRadiusGetAsync(String apikey, String lat, String lon, String term, String radius, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locationsRadiusGetValidateBeforeCall(apikey, lat, lon, term, radius, locale, locationTypes, limit, sort, activeOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locationsSlugGet
     * @param apikey  (required)
     * @param term this field expects the exact slug code of the &#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locationsSlugGetCall(String apikey, String term, String locale, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/locations/slug";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (term != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("term", term));
        if (locale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locale", locale));
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_only", activeOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null)
        localVarHeaderParams.put("apikey", apiClient.parameterToString(apikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locationsSlugGetValidateBeforeCall(String apikey, String term, String locale, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling locationsSlugGet(Async)");
        }
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling locationsSlugGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locationsSlugGetCall(apikey, term, locale, activeOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search by seo url
     * 
     * @param apikey  (required)
     * @param term this field expects the exact slug code of the &#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 locationsSlugGet(String apikey, String term, String locale, Boolean activeOnly) throws ApiException {
        ApiResponse<InlineResponse200> resp = locationsSlugGetWithHttpInfo(apikey, term, locale, activeOnly);
        return resp.getData();
    }

    /**
     * Search by seo url
     * 
     * @param apikey  (required)
     * @param term this field expects the exact slug code of the &#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> locationsSlugGetWithHttpInfo(String apikey, String term, String locale, Boolean activeOnly) throws ApiException {
        com.squareup.okhttp.Call call = locationsSlugGetValidateBeforeCall(apikey, term, locale, activeOnly, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search by seo url (asynchronously)
     * 
     * @param apikey  (required)
     * @param term this field expects the exact slug code of the &#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locationsSlugGetAsync(String apikey, String term, String locale, Boolean activeOnly, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locationsSlugGetValidateBeforeCall(apikey, term, locale, activeOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locationsSubentityGet
     * @param apikey  (required)
     * @param term this is the exact IATA airport or ISO3166 location code - station, airport, bus_station, city, autonomous_territory, subdivision, country (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locationsSubentityGetCall(String apikey, String term, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/locations/subentity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (term != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("term", term));
        if (locale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locale", locale));
        if (locationTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("location_types", locationTypes));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_only", activeOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null)
        localVarHeaderParams.put("apikey", apiClient.parameterToString(apikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locationsSubentityGetValidateBeforeCall(String apikey, String term, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling locationsSubentityGet(Async)");
        }
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling locationsSubentityGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locationsSubentityGetCall(apikey, term, locale, locationTypes, limit, sort, activeOnly, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get by subentity
     * Get all locations that are below (in hierarchy) the one specified by id - e.g. for &#x60;?type&#x3D;subentity&amp;term&#x3D;london_gb&#x60; all locations in London are returned (as London is &#x60;city&#x60;, &#x60;airports&#x60;, &#x60;stations&#x60; and &#x60;bus_stations&#x60; are returned).
     * @param apikey  (required)
     * @param term this is the exact IATA airport or ISO3166 location code - station, airport, bus_station, city, autonomous_territory, subdivision, country (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 locationsSubentityGet(String apikey, String term, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly) throws ApiException {
        ApiResponse<InlineResponse200> resp = locationsSubentityGetWithHttpInfo(apikey, term, locale, locationTypes, limit, sort, activeOnly);
        return resp.getData();
    }

    /**
     * Get by subentity
     * Get all locations that are below (in hierarchy) the one specified by id - e.g. for &#x60;?type&#x3D;subentity&amp;term&#x3D;london_gb&#x60; all locations in London are returned (as London is &#x60;city&#x60;, &#x60;airports&#x60;, &#x60;stations&#x60; and &#x60;bus_stations&#x60; are returned).
     * @param apikey  (required)
     * @param term this is the exact IATA airport or ISO3166 location code - station, airport, bus_station, city, autonomous_territory, subdivision, country (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> locationsSubentityGetWithHttpInfo(String apikey, String term, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly) throws ApiException {
        com.squareup.okhttp.Call call = locationsSubentityGetValidateBeforeCall(apikey, term, locale, locationTypes, limit, sort, activeOnly, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get by subentity (asynchronously)
     * Get all locations that are below (in hierarchy) the one specified by id - e.g. for &#x60;?type&#x3D;subentity&amp;term&#x3D;london_gb&#x60; all locations in London are returned (as London is &#x60;city&#x60;, &#x60;airports&#x60;, &#x60;stations&#x60; and &#x60;bus_stations&#x60; are returned).
     * @param apikey  (required)
     * @param term this is the exact IATA airport or ISO3166 location code - station, airport, bus_station, city, autonomous_territory, subdivision, country (required)
     * @param locale desired locale output - this is the the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param locationTypes desired location output, accepted values: &#x60;station&#x60;, &#x60;airport&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;autonomous_territory&#x60;, &#x60;subdivision&#x60;, &#x60;country&#x60;, &#x60;region&#x60;, &#x60;continent&#x60;. To use more than one &#x60;location_types&#x60;, use multiple &#x60;&amp;location_types&#x3D;&#x60; (optional)
     * @param limit default value &#x3D; 20. Desired number of results in the output. (optional)
     * @param sort desired order of the output.  For A-&gt;Z use &#x27;sort&#x3D;name&#x27;, for Z-&gt;A use &#x27;sort&#x3D;-name&#x27;. (optional)
     * @param activeOnly default value &#x3D; true.  It displayes all active locations. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locationsSubentityGetAsync(String apikey, String term, String locale, String locationTypes, Integer limit, String sort, Boolean activeOnly, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locationsSubentityGetValidateBeforeCall(apikey, term, locale, locationTypes, limit, sort, activeOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locationsTopdestinationsGet
     * @param apikey  (required)
     * @param term identifier of the start point - slug or id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;) More than one is possible. (required)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sort  (optional)
     * @param activeOnly default value &#x3D; true.  It displays all active locations. (optional)
     * @param sourcePopularity based on &#x60;searches&#x60; (default), &#x60;bookings&#x60; or &#x60;clicks&#x60; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locationsTopdestinationsGetCall(String apikey, String term, String locale, Integer limit, String sort, Boolean activeOnly, String sourcePopularity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/locations/topdestinations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (term != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("term", term));
        if (locale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locale", locale));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (activeOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("active_only", activeOnly));
        if (sourcePopularity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source_popularity", sourcePopularity));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null)
        localVarHeaderParams.put("apikey", apiClient.parameterToString(apikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locationsTopdestinationsGetValidateBeforeCall(String apikey, String term, String locale, Integer limit, String sort, Boolean activeOnly, String sourcePopularity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling locationsTopdestinationsGet(Async)");
        }
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling locationsTopdestinationsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locationsTopdestinationsGetCall(apikey, term, locale, limit, sort, activeOnly, sourcePopularity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search top destinations
     * This type of request returns a list of destinations most searched / clicked on / booked from the starting point &#x60;term&#x60;.  The &#x60;limit&#x60; is used to limit the range of results.
     * @param apikey  (required)
     * @param term identifier of the start point - slug or id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;) More than one is possible. (required)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sort  (optional)
     * @param activeOnly default value &#x3D; true.  It displays all active locations. (optional)
     * @param sourcePopularity based on &#x60;searches&#x60; (default), &#x60;bookings&#x60; or &#x60;clicks&#x60; (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 locationsTopdestinationsGet(String apikey, String term, String locale, Integer limit, String sort, Boolean activeOnly, String sourcePopularity) throws ApiException {
        ApiResponse<InlineResponse200> resp = locationsTopdestinationsGetWithHttpInfo(apikey, term, locale, limit, sort, activeOnly, sourcePopularity);
        return resp.getData();
    }

    /**
     * Search top destinations
     * This type of request returns a list of destinations most searched / clicked on / booked from the starting point &#x60;term&#x60;.  The &#x60;limit&#x60; is used to limit the range of results.
     * @param apikey  (required)
     * @param term identifier of the start point - slug or id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;) More than one is possible. (required)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sort  (optional)
     * @param activeOnly default value &#x3D; true.  It displays all active locations. (optional)
     * @param sourcePopularity based on &#x60;searches&#x60; (default), &#x60;bookings&#x60; or &#x60;clicks&#x60; (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> locationsTopdestinationsGetWithHttpInfo(String apikey, String term, String locale, Integer limit, String sort, Boolean activeOnly, String sourcePopularity) throws ApiException {
        com.squareup.okhttp.Call call = locationsTopdestinationsGetValidateBeforeCall(apikey, term, locale, limit, sort, activeOnly, sourcePopularity, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search top destinations (asynchronously)
     * This type of request returns a list of destinations most searched / clicked on / booked from the starting point &#x60;term&#x60;.  The &#x60;limit&#x60; is used to limit the range of results.
     * @param apikey  (required)
     * @param term identifier of the start point - slug or id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;) More than one is possible. (required)
     * @param locale desired locale output - this is the language of the results. Should any other locale be used other than the specified locales, en-US is used. (optional)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sort  (optional)
     * @param activeOnly default value &#x3D; true.  It displays all active locations. (optional)
     * @param sourcePopularity based on &#x60;searches&#x60; (default), &#x60;bookings&#x60; or &#x60;clicks&#x60; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locationsTopdestinationsGetAsync(String apikey, String term, String locale, Integer limit, String sort, Boolean activeOnly, String sourcePopularity, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locationsTopdestinationsGetValidateBeforeCall(apikey, term, locale, limit, sort, activeOnly, sourcePopularity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for locationsTophashtagsGet
     * @param apikey  (required)
     * @param term identifier of the start point - id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;) More than one is possible. (required)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sourcePopularity based on &#x60;searches&#x60; (default), &#x60;bookings&#x60; or &#x60;clicks&#x60; (optional)
     * @param fallbackPopularity ... based on &#x60;searches&#x60;, &#x60;bookings&#x60; or &#x60;clicks&#x60;.  Can be left blank.  Used if not enough results is returned by &#x60;source_popularity&#x60; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call locationsTophashtagsGetCall(String apikey, String term, Integer limit, String sourcePopularity, String fallbackPopularity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/locations/tophashtags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (term != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("term", term));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sourcePopularity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source_popularity", sourcePopularity));
        if (fallbackPopularity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fallback_popularity", fallbackPopularity));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apikey != null)
        localVarHeaderParams.put("apikey", apiClient.parameterToString(apikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call locationsTophashtagsGetValidateBeforeCall(String apikey, String term, Integer limit, String sourcePopularity, String fallbackPopularity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apikey' is set
        if (apikey == null) {
            throw new ApiException("Missing the required parameter 'apikey' when calling locationsTophashtagsGet(Async)");
        }
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling locationsTophashtagsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = locationsTophashtagsGetCall(apikey, term, limit, sourcePopularity, fallbackPopularity, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Top destinations&#x60; hashtags lookup
     * This type of request returns a list of destinations&#x27; hashtags most searched / clicked on / booked from the starting point &#x60;term&#x60;. In other words it can be understood as following: What are the most popular activies at the places that customers tend to search for / click / book when flying from &#x60;term&#x60; ? The &#x60;limit&#x60; is used to limit the range of results.
     * @param apikey  (required)
     * @param term identifier of the start point - id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;) More than one is possible. (required)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sourcePopularity based on &#x60;searches&#x60; (default), &#x60;bookings&#x60; or &#x60;clicks&#x60; (optional)
     * @param fallbackPopularity ... based on &#x60;searches&#x60;, &#x60;bookings&#x60; or &#x60;clicks&#x60;.  Can be left blank.  Used if not enough results is returned by &#x60;source_popularity&#x60; (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 locationsTophashtagsGet(String apikey, String term, Integer limit, String sourcePopularity, String fallbackPopularity) throws ApiException {
        ApiResponse<InlineResponse2001> resp = locationsTophashtagsGetWithHttpInfo(apikey, term, limit, sourcePopularity, fallbackPopularity);
        return resp.getData();
    }

    /**
     * Top destinations&#x60; hashtags lookup
     * This type of request returns a list of destinations&#x27; hashtags most searched / clicked on / booked from the starting point &#x60;term&#x60;. In other words it can be understood as following: What are the most popular activies at the places that customers tend to search for / click / book when flying from &#x60;term&#x60; ? The &#x60;limit&#x60; is used to limit the range of results.
     * @param apikey  (required)
     * @param term identifier of the start point - id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;) More than one is possible. (required)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sourcePopularity based on &#x60;searches&#x60; (default), &#x60;bookings&#x60; or &#x60;clicks&#x60; (optional)
     * @param fallbackPopularity ... based on &#x60;searches&#x60;, &#x60;bookings&#x60; or &#x60;clicks&#x60;.  Can be left blank.  Used if not enough results is returned by &#x60;source_popularity&#x60; (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> locationsTophashtagsGetWithHttpInfo(String apikey, String term, Integer limit, String sourcePopularity, String fallbackPopularity) throws ApiException {
        com.squareup.okhttp.Call call = locationsTophashtagsGetValidateBeforeCall(apikey, term, limit, sourcePopularity, fallbackPopularity, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Top destinations&#x60; hashtags lookup (asynchronously)
     * This type of request returns a list of destinations&#x27; hashtags most searched / clicked on / booked from the starting point &#x60;term&#x60;. In other words it can be understood as following: What are the most popular activies at the places that customers tend to search for / click / book when flying from &#x60;term&#x60; ? The &#x60;limit&#x60; is used to limit the range of results.
     * @param apikey  (required)
     * @param term identifier of the start point - id (&#x60;airport&#x60;, &#x60;station&#x60;, &#x60;bus_station&#x60;, &#x60;city&#x60;, &#x60;subdivision&#x60;, &#x60;autonomous_territory&#x60;, &#x60;country&#x60;) More than one is possible. (required)
     * @param limit default value &#x3D; 100. Desired number of results in the output. (optional)
     * @param sourcePopularity based on &#x60;searches&#x60; (default), &#x60;bookings&#x60; or &#x60;clicks&#x60; (optional)
     * @param fallbackPopularity ... based on &#x60;searches&#x60;, &#x60;bookings&#x60; or &#x60;clicks&#x60;.  Can be left blank.  Used if not enough results is returned by &#x60;source_popularity&#x60; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call locationsTophashtagsGetAsync(String apikey, String term, Integer limit, String sourcePopularity, String fallbackPopularity, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = locationsTophashtagsGetValidateBeforeCall(apikey, term, limit, sourcePopularity, fallbackPopularity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
